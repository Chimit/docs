"use strict";(self.webpackChunknutgram_docs=self.webpackChunknutgram_docs||[]).push([[1414],{3905:function(e,t,n){n.d(t,{Zo:function(){return u},kt:function(){return m}});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),l=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=l(e.components);return a.createElement(c.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},p=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),p=l(n),m=r,h=p["".concat(c,".").concat(m)]||p[m]||d[m]||o;return n?a.createElement(h,i(i({ref:t},u),{},{components:n})):a.createElement(h,i({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=p;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},83907:function(e,t,n){n.r(t),n.d(t,{assets:function(){return u},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return s},metadata:function(){return l},toc:function(){return d}});var a=n(83117),r=n(80102),o=(n(67294),n(3905)),i=["components"],s={},c="Introduction",l={unversionedId:"testing/introduction",id:"testing/introduction",title:"Introduction",description:"The framework supports some automatic mocking features that allows you to easily create unit tests for your application.",source:"@site/docs/testing/introduction.md",sourceDirName:"testing",slug:"/testing/introduction",permalink:"/docs/testing/introduction",editUrl:"https://github.com/nutgram/docs/tree/master/docs/testing/introduction.md",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Testing",permalink:"/docs/category/testing"},next:{title:"Hearing updates",permalink:"/docs/testing/hearing"}},u={},d=[{value:"Getting a <code>Fake</code> instance",id:"getting-a-fake-instance",level:2},{value:"Base Methods",id:"base-methods",level:2},{value:"<code>reply()</code>",id:"reply",level:3},{value:"<code>dump()</code> &amp;&amp; <code>dd()</code>",id:"dump--dd",level:3},{value:"<code>clearCache()</code>",id:"clearcache",level:3},{value:"<code>getRequestHistory()</code>",id:"getrequesthistory",level:3}],p={toc:d};function m(e){var t=e.components,n=(0,r.Z)(e,i);return(0,o.kt)("wrapper",(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"introduction"},"Introduction"),(0,o.kt)("p",null,"The framework supports some automatic mocking features that allows you to easily create unit tests for your application.\nGiven the framework-agnostic nature, you are free to use the test library you want (PHPUnit, PEST, etc), in the examples shown PHPUnit will be used."),(0,o.kt)("p",null,"The framework can be instantiated as a ",(0,o.kt)("inlineCode",{parentName:"p"},"Fake")," instance, all the requests to the Telegram API are stored inside a history, and a mocked response is generated accordingly.\nIn this way, you can test your business logic, without having to interact at all with the Telegram API."),(0,o.kt)("h2",{id:"getting-a-fake-instance"},"Getting a ",(0,o.kt)("inlineCode",{parentName:"h2"},"Fake")," instance"),(0,o.kt)("div",{className:"admonition admonition-tip alert alert--success"},(0,o.kt)("div",{parentName:"div",className:"admonition-heading"},(0,o.kt)("h5",{parentName:"div"},(0,o.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,o.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"},(0,o.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"}))),"tip")),(0,o.kt)("div",{parentName:"div",className:"admonition-content"},(0,o.kt)("p",{parentName:"div"},"If you are using Laravel, checkout the section in the ",(0,o.kt)("a",{parentName:"p",href:"/docs/configuration/laravel#testing"},"Laravel Integration page")," to see\nhow to get automatically the fake instance!"))),(0,o.kt)("p",null,"How to get a ",(0,o.kt)("inlineCode",{parentName:"p"},"fake")," instance:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"use PHPUnit\\Framework\\TestCase;\nuse SergiX44\\Nutgram\\Nutgram;\n\nclass BotTest extends TestCase\n{\n    public function test_retrieve_mocked_instance(): void\n    {\n        $bot = Nutgram::fake();\n        \n        // ...\n    }\n}\n")),(0,o.kt)("p",null,"The ",(0,o.kt)("inlineCode",{parentName:"p"},"$bot")," instance tho, is a clean one with no handlers/middleware registered, so you should have somewhere a method\nthat register them, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"use PHPUnit\\Framework\\TestCase;\nuse SergiX44\\Nutgram\\Testing\\FakeNutgram;\nuse SergiX44\\Nutgram\\Nutgram;\n\nclass BotTest extends TestCase\n{\n    private FakeNutgram $bot;\n    \n    public function setUp(): void \n    {\n        $this->bot = Nutgram::fake();\n        $this->bootInstance($this->bot);    \n    }\n\n\n    public function test_retrieve_mocked_instance(): void\n    {\n        // define assertions\n        $this->bot->reply()\n            ->assertReply('sendMessage', ['text' => 'bar'], 0);\n            ->assertReply('sendMessage', ['text' => 'baz'], 1);\n    }\n}\n")),(0,o.kt)("h2",{id:"base-methods"},"Base Methods"),(0,o.kt)("h3",{id:"reply"},(0,o.kt)("inlineCode",{parentName:"h3"},"reply()")),(0,o.kt)("p",null,"Executes run a mocked update (and mocked responses) though the bot handlers.\nIt should be called after the ",(0,o.kt)("a",{parentName:"p",href:"/docs/testing/mocking"},'"will" methods')," and ",(0,o.kt)("a",{parentName:"p",href:"/docs/testing/hearing"},'"hears" methods'),"."),(0,o.kt)("p",null,"It's like calling the ",(0,o.kt)("inlineCode",{parentName:"p"},"->run()")," method, that also prepare the instance for further assertions and tests."),(0,o.kt)("h3",{id:"dump--dd"},(0,o.kt)("inlineCode",{parentName:"h3"},"dump()")," && ",(0,o.kt)("inlineCode",{parentName:"h3"},"dd()")),(0,o.kt)("p",null,"To be used wil debugging, it will dump the request generated by the bot. ",(0,o.kt)("inlineCode",{parentName:"p"},"dump")," will output to console, while the ",(0,o.kt)("inlineCode",{parentName:"p"},"dd"),"\nwill also halt the execution."),(0,o.kt)("h3",{id:"clearcache"},(0,o.kt)("inlineCode",{parentName:"h3"},"clearCache()")),(0,o.kt)("p",null,"It empties all the internal caches."),(0,o.kt)("h3",{id:"getrequesthistory"},(0,o.kt)("inlineCode",{parentName:"h3"},"getRequestHistory()")),(0,o.kt)("p",null,"Returns an associative array with the request generated  by the bot, and the mocked response."))}m.isMDXComponent=!0}}]);