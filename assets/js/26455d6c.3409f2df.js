"use strict";(self.webpackChunknutgram_docs=self.webpackChunknutgram_docs||[]).push([[5691],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var r=n(67294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},l=Object.keys(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(r=0;r<l.length;r++)n=l[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=r.createContext({}),s=function(e){var t=r.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=s(e.components);return r.createElement(u.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,l=e.originalType,u=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),p=s(n),m=a,v=p["".concat(u,".").concat(m)]||p[m]||d[m]||l;return n?r.createElement(v,i(i({ref:t},c),{},{components:n})):r.createElement(v,i({ref:t},c))}));function m(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var l=n.length,i=new Array(l);i[0]=p;var o={};for(var u in t)hasOwnProperty.call(t,u)&&(o[u]=t[u]);o.originalType=e,o.mdxType="string"==typeof e?e:a,i[1]=o;for(var s=2;s<l;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}p.displayName="MDXCreateElement"},58215:function(e,t,n){n.d(t,{Z:function(){return a}});var r=n(67294);function a(e){var t=e.children,n=e.hidden,a=e.className;return r.createElement("div",{role:"tabpanel",hidden:n,className:a},t)}},9877:function(e,t,n){n.d(t,{Z:function(){return c}});var r=n(87462),a=n(67294),l=n(72389),i=n(63725),o=n(86010),u="tabItem_LplD";function s(e){var t,n,l,s=e.lazy,c=e.block,d=e.defaultValue,p=e.values,m=e.groupId,v=e.className,f=a.Children.map(e.children,(function(e){if((0,a.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),h=null!=p?p:f.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),k=(0,i.lx)(h,(function(e,t){return e.value===t.value}));if(k.length>0)throw new Error('Docusaurus error: Duplicate values "'+k.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var w=null===d?d:null!=(t=null!=d?d:null==(n=f.find((function(e){return e.props.default})))?void 0:n.props.value)?t:null==(l=f[0])?void 0:l.props.value;if(null!==w&&!h.some((function(e){return e.value===w})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+w+'" but none of its children has the corresponding value. Available values are: '+h.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var g=(0,i.UB)(),b=g.tabGroupChoices,y=g.setTabGroupChoices,N=(0,a.useState)(w),T=N[0],O=N[1],C=[],E=(0,i.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var x=b[m];null!=x&&x!==T&&h.some((function(e){return e.value===x}))&&O(x)}var j=function(e){var t=e.currentTarget,n=C.indexOf(t),r=h[n].value;r!==T&&(E(t),O(r),null!=m&&y(m,r))},P=function(e){var t,n=null;switch(e.key){case"ArrowRight":var r=C.indexOf(e.currentTarget)+1;n=C[r]||C[0];break;case"ArrowLeft":var a=C.indexOf(e.currentTarget)-1;n=C[a]||C[C.length-1]}null==(t=n)||t.focus()};return a.createElement("div",{className:"tabs-container"},a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,o.Z)("tabs",{"tabs--block":c},v)},h.map((function(e){var t=e.value,n=e.label,l=e.attributes;return a.createElement("li",(0,r.Z)({role:"tab",tabIndex:T===t?0:-1,"aria-selected":T===t,key:t,ref:function(e){return C.push(e)},onKeyDown:P,onFocus:j,onClick:j},l,{className:(0,o.Z)("tabs__item",u,null==l?void 0:l.className,{"tabs__item--active":T===t})}),null!=n?n:t)}))),s?(0,a.cloneElement)(f.filter((function(e){return e.props.value===T}))[0],{className:"margin-vert--md"}):a.createElement("div",{className:"margin-vert--md"},f.map((function(e,t){return(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==T})}))))}function c(e){var t=(0,l.Z)();return a.createElement(s,(0,r.Z)({key:String(t)},e))}},6063:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return c},default:function(){return f},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return m}});var r=n(87462),a=n(63366),l=(n(67294),n(3905)),i=n(9877),o=n(58215),u=["components"],s={},c="Mock incoming responses",d={unversionedId:"testing/mocking",id:"testing/mocking",title:"Mock incoming responses",description:"Overview",source:"@site/docs/testing/mocking.mdx",sourceDirName:"testing",slug:"/testing/mocking",permalink:"/docs/testing/mocking",editUrl:"https://github.com/nutgram/docs/tree/master/docs/testing/mocking.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Hearing updates",permalink:"/docs/testing/hearing"},next:{title:"Available Assertions",permalink:"/docs/testing/asserting"}},p={},m=[{value:"Overview",id:"overview",level:2},{value:"Example",id:"example",level:3},{value:"Available Methods",id:"available-methods",level:2},{value:"willReceive",id:"willreceive",level:3},{value:"willReceivePartial",id:"willreceivepartial",level:3},{value:"willStartConversation",id:"willstartconversation",level:3},{value:"withoutMiddleware",id:"withoutmiddleware",level:3},{value:"overridemiddleware",id:"overridemiddleware",level:3}],v={toc:m};function f(e){var t=e.components,n=(0,a.Z)(e,u);return(0,l.kt)("wrapper",(0,r.Z)({},v,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"mock-incoming-responses"},"Mock incoming responses"),(0,l.kt)("h2",{id:"overview"},"Overview"),(0,l.kt)("p",null,"After you have configured your hearing method, to test a custom response from Telegram\nyou have to mock the received data.\nTo do that, the framework gives you some methods to automatically generate incoming responses."),(0,l.kt)("h3",{id:"example"},"Example"),(0,l.kt)("p",null,"We assume that the ",(0,l.kt)("inlineCode",{parentName:"p"},"$this->bot")," is loaded as mentioned on the ",(0,l.kt)("a",{parentName:"p",href:"/docs/testing/introduction"},"Introduction")," page."),(0,l.kt)(i.Z,{mdxType:"Tabs"},(0,l.kt)(o.Z,{value:"test",label:"Test",default:!0,mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$this\n    ->bot\n    ->hearText('dice')\n    ->willReceivePartial(['dice' => ['emoji' => '\ud83c\udfb2', 'value' => 4]])\n    ->reply()\n    ->assertReplyMessage(['dice' => ['emoji' => '\ud83c\udfb2', 'value' => 4]]);\n"))),(0,l.kt)(o.Z,{value:"handler",label:"Handler",mdxType:"TabItem"},(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"$bot->onText('dice', function (Nutgram $bot) {\n    $bot->sendDice(['emoji' => Emojis::DICE]);\n});\n")))),(0,l.kt)("h2",{id:"available-methods"},"Available Methods"),(0,l.kt)("div",{class:"container"},(0,l.kt)("div",{class:"row"},(0,l.kt)("div",{class:"col col--6"},(0,l.kt)("div",null,(0,l.kt)("code",null,(0,l.kt)("a",{href:"#willreceive"},"willReceive()"))),(0,l.kt)("div",null,(0,l.kt)("code",null,(0,l.kt)("a",{href:"#willreceivepartial"},"willReceivePartial()"))),(0,l.kt)("div",null,(0,l.kt)("code",null,(0,l.kt)("a",{href:"#willstartconversation"},"willStartConversation()")))),(0,l.kt)("div",{class:"col col--6"},(0,l.kt)("div",null,(0,l.kt)("code",null,(0,l.kt)("a",{href:"#withoutmiddleware"},"withoutMiddleware()"))),(0,l.kt)("div",null,(0,l.kt)("code",null,(0,l.kt)("a",{href:"#overridemiddleware"},"overrideMiddleware()")))))),(0,l.kt)("h3",{id:"willreceive"},"willReceive"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"willReceive")," will mock an entire response.\nThe ",(0,l.kt)("inlineCode",{parentName:"p"},"ok")," parameter is optional."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"->willReceive([\n    'message_id' => 1234,\n    'date' => 1647284950,\n    'from' => [\n        'id' => 123456789,\n        'is_bot' => true,\n        'username' => 'nutgrambot',\n        'first_name' => 'nutgrambot',\n    ],\n    'chat' => [\n        'id' => 12345,\n        'type' => 'private',\n        'username' => 'nutgram',\n        'first_name' => 'foo',\n        'last_name' => 'bar',\n    ],\n    'dice' => [\n        'emoji' => '\ud83c\udfb2', \n        'value' => 4\n    ]\n], ok: true);\n")),(0,l.kt)("h3",{id:"willreceivepartial"},"willReceivePartial"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"willReceivePartial")," will mock a partial response.\nThe ",(0,l.kt)("inlineCode",{parentName:"p"},"ok")," parameter is optional."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"->willReceivePartial([\n    'dice' => [\n        'emoji' => '\ud83c\udfb2', \n        'value' => 4\n    ]\n], ok: true);\n")),(0,l.kt)("h3",{id:"willstartconversation"},"willStartConversation"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"willStartConversation")," will cache ",(0,l.kt)("inlineCode",{parentName:"p"},"userId")," and ",(0,l.kt)("inlineCode",{parentName:"p"},"chatId"),".",(0,l.kt)("br",null),"\nUseful when used with ",(0,l.kt)("a",{parentName:"p",href:"asserting#assertactiveconversation"},(0,l.kt)("inlineCode",{parentName:"a"},"assertActiveConversation")),"\nand ",(0,l.kt)("a",{parentName:"p",href:"asserting#assertnoconversation"},(0,l.kt)("inlineCode",{parentName:"a"},"assertNoConversation")),".",(0,l.kt)("br",null),"\nThe ",(0,l.kt)("inlineCode",{parentName:"p"},"remember")," parameter is optional."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"->willStartConversation(remember: true);\n")),(0,l.kt)("h3",{id:"withoutmiddleware"},"withoutMiddleware"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"withoutMiddleware")," will remove the listed middlewares from the global middleware list."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"->withoutMiddleware([FooMiddleware::class]);\n")),(0,l.kt)("h3",{id:"overridemiddleware"},"overridemiddleware"),(0,l.kt)("p",null,"The ",(0,l.kt)("inlineCode",{parentName:"p"},"overridemiddleware")," will override the global middleware list with the listed middlewares."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-php"},"->overridemiddleware([BarMiddleware::class]);\n")))}f.isMDXComponent=!0}}]);