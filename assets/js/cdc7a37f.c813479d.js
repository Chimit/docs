"use strict";(self.webpackChunknutgram_docs=self.webpackChunknutgram_docs||[]).push([[8730],{3905:function(e,t,a){a.d(t,{Zo:function(){return u},kt:function(){return m}});var n=a(67294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},s=Object.keys(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(n=0;n<s.length;n++)a=s[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=n.createContext({}),p=function(e){var t=n.useContext(o),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},u=function(e){var t=p(e.components);return n.createElement(o.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},c=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,s=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),c=p(a),m=r,v=c["".concat(o,".").concat(m)]||c[m]||d[m]||s;return a?n.createElement(v,l(l({ref:t},u),{},{components:a})):n.createElement(v,l({ref:t},u))}));function m(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var s=a.length,l=new Array(s);l[0]=c;var i={};for(var o in t)hasOwnProperty.call(t,o)&&(i[o]=t[o]);i.originalType=e,i.mdxType="string"==typeof e?e:r,l[1]=i;for(var p=2;p<s;p++)l[p]=a[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,a)}c.displayName="MDXCreateElement"},58215:function(e,t,a){a.d(t,{Z:function(){return r}});var n=a(67294);function r(e){var t=e.children,a=e.hidden,r=e.className;return n.createElement("div",{role:"tabpanel",hidden:a,className:r},t)}},9877:function(e,t,a){a.d(t,{Z:function(){return u}});var n=a(87462),r=a(67294),s=a(72389),l=a(63725),i=a(86010),o="tabItem_LplD";function p(e){var t,a,s,p=e.lazy,u=e.block,d=e.defaultValue,c=e.values,m=e.groupId,v=e.className,h=r.Children.map(e.children,(function(e){if((0,r.isValidElement)(e)&&void 0!==e.props.value)return e;throw new Error("Docusaurus error: Bad <Tabs> child <"+("string"==typeof e.type?e.type:e.type.name)+'>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.')})),k=null!=c?c:h.map((function(e){var t=e.props;return{value:t.value,label:t.label,attributes:t.attributes}})),g=(0,l.lx)(k,(function(e,t){return e.value===t.value}));if(g.length>0)throw new Error('Docusaurus error: Duplicate values "'+g.map((function(e){return e.value})).join(", ")+'" found in <Tabs>. Every value needs to be unique.');var f=null===d?d:null!=(t=null!=d?d:null==(a=h.find((function(e){return e.props.default})))?void 0:a.props.value)?t:null==(s=h[0])?void 0:s.props.value;if(null!==f&&!k.some((function(e){return e.value===f})))throw new Error('Docusaurus error: The <Tabs> has a defaultValue "'+f+'" but none of its children has the corresponding value. Available values are: '+k.map((function(e){return e.value})).join(", ")+". If you intend to show no default tab, use defaultValue={null} instead.");var N=(0,l.UB)(),b=N.tabGroupChoices,y=N.setTabGroupChoices,w=(0,r.useState)(f),x=w[0],T=w[1],C=[],R=(0,l.o5)().blockElementScrollPositionUntilNextRender;if(null!=m){var O=b[m];null!=O&&O!==x&&k.some((function(e){return e.value===O}))&&T(O)}var E=function(e){var t=e.currentTarget,a=C.indexOf(t),n=k[a].value;n!==x&&(R(t),T(n),null!=m&&y(m,n))},M=function(e){var t,a=null;switch(e.key){case"ArrowRight":var n=C.indexOf(e.currentTarget)+1;a=C[n]||C[0];break;case"ArrowLeft":var r=C.indexOf(e.currentTarget)-1;a=C[r]||C[C.length-1]}null==(t=a)||t.focus()};return r.createElement("div",{className:"tabs-container"},r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":u},v)},k.map((function(e){var t=e.value,a=e.label,s=e.attributes;return r.createElement("li",(0,n.Z)({role:"tab",tabIndex:x===t?0:-1,"aria-selected":x===t,key:t,ref:function(e){return C.push(e)},onKeyDown:M,onFocus:E,onClick:E},s,{className:(0,i.Z)("tabs__item",o,null==s?void 0:s.className,{"tabs__item--active":x===t})}),null!=a?a:t)}))),p?(0,r.cloneElement)(h.filter((function(e){return e.props.value===x}))[0],{className:"margin-vert--md"}):r.createElement("div",{className:"margin-vert--md"},h.map((function(e,t){return(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==x})}))))}function u(e){var t=(0,s.Z)();return r.createElement(p,(0,n.Z)({key:String(t)},e))}},20293:function(e,t,a){a.r(t),a.d(t,{assets:function(){return c},contentTitle:function(){return u},default:function(){return h},frontMatter:function(){return p},metadata:function(){return d},toc:function(){return m}});var n=a(87462),r=a(63366),s=(a(67294),a(3905)),l=a(9877),i=a(58215),o=["components"],p={},u="Available Assertions",d={unversionedId:"testing/asserting",id:"testing/asserting",title:"Available Assertions",description:"Overview",source:"@site/docs/testing/asserting.mdx",sourceDirName:"testing",slug:"/testing/asserting",permalink:"/docs/testing/asserting",editUrl:"https://github.com/nutgram/docs/tree/master/docs/testing/asserting.mdx",tags:[],version:"current",frontMatter:{},sidebar:"docs",previous:{title:"Mock incoming responses",permalink:"/docs/testing/mocking"},next:{title:"Upgrading",permalink:"/docs/category/upgrading"}},c={},m=[{value:"Overview",id:"overview",level:2},{value:"Example",id:"example",level:3},{value:"Available Assertions",id:"available-assertions-1",level:2},{value:"assertRaw",id:"assertraw",level:3},{value:"assertCalled",id:"assertcalled",level:3},{value:"assertReply",id:"assertreply",level:3},{value:"assertReplyMessage",id:"assertreplymessage",level:3},{value:"assertReplyText",id:"assertreplytext",level:3},{value:"assertActiveConversation",id:"assertactiveconversation",level:3},{value:"assertNoConversation",id:"assertnoconversation",level:3},{value:"assertNoReply",id:"assertnoreply",level:3}],v={toc:m};function h(e){var t=e.components,a=(0,r.Z)(e,o);return(0,s.kt)("wrapper",(0,n.Z)({},v,a,{components:t,mdxType:"MDXLayout"}),(0,s.kt)("h1",{id:"available-assertions"},"Available Assertions"),(0,s.kt)("h2",{id:"overview"},"Overview"),(0,s.kt)("p",null,"The assertions are the ones that perform the checks to ensure that things are going as planned."),(0,s.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"The assertions must be called after the ",(0,s.kt)("inlineCode",{parentName:"p"},"reply()")," method!"))),(0,s.kt)("h3",{id:"example"},"Example"),(0,s.kt)("p",null,"We assume that the ",(0,s.kt)("inlineCode",{parentName:"p"},"$this->bot")," is loaded as mentioned on the ",(0,s.kt)("a",{parentName:"p",href:"/docs/testing/introduction"},"Introduction")," page."),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"test",label:"Test",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"$this\n    ->bot\n    ->hearText('foo')\n    ->reply()\n    ->assertReplyText('bar');\n"))),(0,s.kt)(i.Z,{value:"handler",label:"Handler",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"$bot->onText('foo', function (Nutgram $bot) {\n    $bot->sendMessage('bar');\n});\n")))),(0,s.kt)("h2",{id:"available-assertions-1"},"Available Assertions"),(0,s.kt)("div",{class:"container"},(0,s.kt)("div",{class:"row"},(0,s.kt)("div",{class:"col col--6"},(0,s.kt)("div",null,(0,s.kt)("code",null,(0,s.kt)("a",{href:"#assertraw"},"assertRaw()"))),(0,s.kt)("div",null,(0,s.kt)("code",null,(0,s.kt)("a",{href:"#assertcalled"},"assertCalled()"))),(0,s.kt)("div",null,(0,s.kt)("code",null,(0,s.kt)("a",{href:"#assertreply"},"assertReply()"))),(0,s.kt)("div",null,(0,s.kt)("code",null,(0,s.kt)("a",{href:"#assertreplymessage"},"assertReplyMessage()")))),(0,s.kt)("div",{class:"col col--6"},(0,s.kt)("div",null,(0,s.kt)("code",null,(0,s.kt)("a",{href:"#assertreplytext"},"assertReplyText()"))),(0,s.kt)("div",null,(0,s.kt)("code",null,(0,s.kt)("a",{href:"#assertactiveconversation"},"assertActiveConversation()"))),(0,s.kt)("div",null,(0,s.kt)("code",null,(0,s.kt)("a",{href:"#assertnoconversation"},"assertNoConversation()"))),(0,s.kt)("div",null,(0,s.kt)("code",null,(0,s.kt)("a",{href:"#assertnoreply"},"assertNoReply()")))))),(0,s.kt)("h3",{id:"assertraw"},"assertRaw"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertRaw")," asserts the given callback returns a truthy value.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"index")," parameter is optional."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"->assertRaw(function(GuzzleHttp\\Psr7\\Request $request){\n    $content = json_decode((string)$request->getBody(), true, flags: JSON_THROW_ON_ERROR);\n    return $content['text'] === 'bar';\n}, index: 0);\n")),(0,s.kt)("h3",{id:"assertcalled"},"assertCalled"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertCalled")," asserts the given method name is called one time.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"times")," parameter is optional."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"->assertCalled('sendMessage', times: 1);\n")),(0,s.kt)("h3",{id:"assertreply"},"assertReply"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertReply")," asserts the given method name is called in the index history.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"expected")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"index")," parameters are optionals."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"->assertReply('sendMessage', expected: ['text' => 'foo'], index: 0);\n")),(0,s.kt)(l.Z,{mdxType:"Tabs"},(0,s.kt)(i.Z,{value:"test",label:"Test",default:!0,mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"$this\n    ->bot\n    ->hearText('foo')\n    ->reply()\n    ->assertReply('sendMessage', ['text' => 'bar'], 0);\n    ->assertReply('sendMessage', ['text' => 'baz'], 1);\n"))),(0,s.kt)(i.Z,{value:"handler",label:"Handler",mdxType:"TabItem"},(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"$bot->onText('foo', function (Nutgram $bot) {\n    $bot->sendMessage('bar');\n    $bot->sendMessage('baz');\n});\n")))),(0,s.kt)("h3",{id:"assertreplymessage"},"assertReplyMessage"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertReplyMessage")," asserts the given data exists in the ",(0,s.kt)("inlineCode",{parentName:"p"},"message")," attribute.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"index")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"forceMethod")," parameters are optionals."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"->assertReplyMessage(['text' => 'bar'], index: 0, forceMethod:'sendMessage');\n")),(0,s.kt)("h3",{id:"assertreplytext"},"assertReplyText"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertReplyText")," asserts the given value is equal to the ",(0,s.kt)("inlineCode",{parentName:"p"},"message->text")," attribute.\nThe ",(0,s.kt)("inlineCode",{parentName:"p"},"index")," parameter is optional."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"->assertReplyText('bar', index: 0);\n")),(0,s.kt)("h3",{id:"assertactiveconversation"},"assertActiveConversation"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertActiveConversation")," asserts there is an active conversation.\nThe parameters ",(0,s.kt)("inlineCode",{parentName:"p"},"userId")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"chatId")," are optionals."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"->assertActiveConversation(userId: 123 , chatId: 321);\n")),(0,s.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"You must use the ",(0,s.kt)("inlineCode",{parentName:"p"},"willStartConversation()")," method to use this assertion without parameters."))),(0,s.kt)("h3",{id:"assertnoconversation"},"assertNoConversation"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertNoConversation")," asserts there is no active conversation.\nThe parameters ",(0,s.kt)("inlineCode",{parentName:"p"},"userId")," and ",(0,s.kt)("inlineCode",{parentName:"p"},"chatId")," are optionals."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"->assertNoConversation(userId: 123 , chatId: 321);\n")),(0,s.kt)("div",{className:"admonition admonition-caution alert alert--warning"},(0,s.kt)("div",{parentName:"div",className:"admonition-heading"},(0,s.kt)("h5",{parentName:"div"},(0,s.kt)("span",{parentName:"h5",className:"admonition-icon"},(0,s.kt)("svg",{parentName:"span",xmlns:"http://www.w3.org/2000/svg",width:"16",height:"16",viewBox:"0 0 16 16"},(0,s.kt)("path",{parentName:"svg",fillRule:"evenodd",d:"M8.893 1.5c-.183-.31-.52-.5-.887-.5s-.703.19-.886.5L.138 13.499a.98.98 0 0 0 0 1.001c.193.31.53.501.886.501h13.964c.367 0 .704-.19.877-.5a1.03 1.03 0 0 0 .01-1.002L8.893 1.5zm.133 11.497H6.987v-2.003h2.039v2.003zm0-3.004H6.987V5.987h2.039v4.006z"}))),"caution")),(0,s.kt)("div",{parentName:"div",className:"admonition-content"},(0,s.kt)("p",{parentName:"div"},"You must use the ",(0,s.kt)("inlineCode",{parentName:"p"},"willStartConversation()")," method to use this assertion without parameters."))),(0,s.kt)("h3",{id:"assertnoreply"},"assertNoReply"),(0,s.kt)("p",null,"The ",(0,s.kt)("inlineCode",{parentName:"p"},"assertNoReply")," asserts there is no reply."),(0,s.kt)("pre",null,(0,s.kt)("code",{parentName:"pre",className:"language-php"},"->assertNoReply();\n")))}h.isMDXComponent=!0}}]);