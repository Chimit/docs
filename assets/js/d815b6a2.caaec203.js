"use strict";(self.webpackChunknutgram_docs=self.webpackChunknutgram_docs||[]).push([[5494],{29951:function(e,n,t){t.r(n),t.d(n,{assets:function(){return s},contentTitle:function(){return l},default:function(){return p},frontMatter:function(){return r},metadata:function(){return i},toc:function(){return u}});var a=t(83117),o=(t(67294),t(3905));t(56022);const r={sidebar_position:5},l="Symfony",i={unversionedId:"configuration/symfony",id:"configuration/symfony",title:"Symfony",description:"Instead of installing the base nutgram/nutgram base package, you have to install the bundle version:",source:"@site/docs/configuration/symfony.md",sourceDirName:"configuration",slug:"/configuration/symfony",permalink:"/docs/configuration/symfony",draft:!1,editUrl:"https://github.com/nutgram/docs/tree/master/docs/configuration/symfony.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{sidebar_position:5},sidebar:"docs",previous:{title:"Laravel",permalink:"/docs/configuration/laravel"},next:{title:"Usage",permalink:"/docs/category/usage"}},s={},u=[{value:"Configuration",id:"configuration",level:2},{value:"Config files",id:"config-files",level:3},{value:"<code>services.yaml</code> configuration",id:"servicesyaml-configuration",level:3},{value:"Enable conversation refresh",id:"enable-conversation-refresh",level:3},{value:"Commands",id:"commands",level:2},{value:"Logging",id:"logging",level:2},{value:"Cache",id:"cache",level:2},{value:"Webhook updates",id:"webhook-updates",level:2}],m={toc:u};function p(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"symfony"},"Symfony"),(0,o.kt)("p",null,"Instead of installing the base ",(0,o.kt)("inlineCode",{parentName:"p"},"nutgram/nutgram")," base package, you have to install the bundle version:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"composer require nutgram/symfony-bundle\n\n# remove the base package if you have installed it:\n# composer remove nutgram/nutgram\n")),(0,o.kt)("p",null,"If you are not using Symfony Flex, you have to register the bundle inside your ",(0,o.kt)("inlineCode",{parentName:"p"},"bundles.php")," config file."),(0,o.kt)("h2",{id:"configuration"},"Configuration"),(0,o.kt)("h3",{id:"config-files"},"Config files"),(0,o.kt)("p",null,"A Flex recipe is not available yet, but there is a console command that will create the ",(0,o.kt)("inlineCode",{parentName:"p"},"config/telegram.php"),", where you\nshould register your handlers, and ",(0,o.kt)("inlineCode",{parentName:"p"},"config/packages/nutgram.yaml"),", the bundle config file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"php bin/console nutgram:init\n")),(0,o.kt)("p",null,"And in your ",(0,o.kt)("inlineCode",{parentName:"p"},".env")," file, you should also define the ",(0,o.kt)("inlineCode",{parentName:"p"},"TELEGRAM_TOKEN"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},'TELEGRAM_TOKEN="api-telegram-token"\n')),(0,o.kt)("h3",{id:"servicesyaml-configuration"},(0,o.kt)("inlineCode",{parentName:"h3"},"services.yaml")," configuration"),(0,o.kt)("p",null,"To make the most of Symfony's dependency injection, you should choose a namespace under which to place your commands,\nhandlers, conversations, menus ...\nBy default, we advice to put under ",(0,o.kt)("inlineCode",{parentName:"p"},"App\\Telegram"),", and configure it in this way:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# config/services.yaml\n\nservices:\n\n  # ... other configs ...\n\n  # Nutgram handlers\n  App\\Telegram\\:\n    public: true\n    shared: false\n    resource: '../src/Telegram'\n")),(0,o.kt)("p",null,"Set ",(0,o.kt)("inlineCode",{parentName:"p"},"public")," to true, so the framework is able to inject services in your handlers using the symfony container, and\n",(0,o.kt)("inlineCode",{parentName:"p"},"shared")," to false, otherwise it will store the conversations instances, and you will not able to proceed with the\nconversation steps."),(0,o.kt)("p",null,"And you folder tree should be something like this, for example:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-text"},"src/\n\u251c\u2500 Telegram/\n\u2502  \u251c\u2500 Command/\n\u2502  \u2502  \u251c\u2500 StartCommand.php\n\u2502  \u2502  \u251c\u2500 HelpCommand.php\n\u2502  \u251c\u2500 Middleware/\n\u2502  \u2502  \u251c\u2500 GetUser.php\n\u2502  \u251c\u2500 Conversation/\n\u2502  \u251c\u2500 Menu/\n")),(0,o.kt)("h3",{id:"enable-conversation-refresh"},"Enable conversation refresh"),(0,o.kt)("p",null,"Not mandatory, but highly recommended, ",(0,o.kt)("a",{parentName:"p",href:"/docs/usage/conversations#refreshing-deserialized-conversations"},"explained here."),"\nThis allows you to inject services, such as Doctrine repositories, Twig templates, translators, and so on (which are\nnot usually serializable).\nYou can put the call on top of the ",(0,o.kt)("inlineCode",{parentName:"p"},"config/telegram.php")," route file:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"// config/telegram.php\n\n/** @var SergiX44\\Nutgram\\Nutgram $bot */\n\nuse SergiX44\\Nutgram\\Conversations\\Conversation;\n\nConversation::refreshOnDeserialize();\n\n// ...\n")),(0,o.kt)("h2",{id:"commands"},"Commands"),(0,o.kt)("p",null,"The bundle automatically registers these additional commands:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nutgram:init"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Creates the initial config files"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nutgram:hook:info"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Get current webhook status"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nutgram:hook:remove {--d|drop-pending-updates}"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Remove the bot webhook"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nutgram:hook:set {url}"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Set the bot webhook"))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nutgram:register-commands"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Register the bot commands,\nsee ",(0,o.kt)("a",{parentName:"li",href:"../usage/handlers#automatically-register-bot-commands"},"automatically-register-bot-commands")))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nutgram:run"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Start the bot in long polling mode. Useful in development mode."))),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("inlineCode",{parentName:"li"},"nutgram:logout {--d|drop-pending-updates}"),(0,o.kt)("ul",{parentName:"li"},(0,o.kt)("li",{parentName:"ul"},"Log out from the cloud Bot API server")))),(0,o.kt)("h2",{id:"logging"},"Logging"),(0,o.kt)("p",null,"If you are using Monolog, the framework automatically binds on these two channels:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},'# config/packages/monolog.yaml\n\nmonolog:\n  channels:\n    - deprecation\n    - nutgram_console # logs here only when runs in background processes (console)\n    - nutgram # logs here in any other case\n\n  # if you are using polling for development, create a new stdout channel for the console\n  # to see the requests in real time\n  when@dev:\n    monolog:\n      handlers:\n        # ...\n        stdout:\n          type: stream\n          path: "php://stdout"\n          channels: [ "nutgram_console" ]\n')),(0,o.kt)("h2",{id:"cache"},"Cache"),(0,o.kt)("p",null,"The framework automatically get configured by Symfony if you have installed ",(0,o.kt)("inlineCode",{parentName:"p"},"symfony/cache"),", the only thing you have to\ndo is define a cache pool for the framework:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"# config/packages/cache.yaml\nframework:\n  cache:\n\n    # ...\n\n    pools:\n      nutgram.cache:\n        adapter: cache.adapter.redis # or whatever adapter you want\n        tags: true\n\n")),(0,o.kt)("h2",{id:"webhook-updates"},"Webhook updates"),(0,o.kt)("p",null,"When running inside a web context, the Webhook running mode is automatically configured and handlers automatically\nloaded."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-php"},"<?php\n\nnamespace App\\Controller;\n\nuse SergiX44\\Nutgram\\Nutgram;\nuse Symfony\\Bundle\\FrameworkBundle\\Controller\\AbstractController;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\nclass FrontController extends AbstractController\n{\n    #[Route('/hook', name: 'app_webhook')]\n    public function hook(Nutgram $bot): void\n    {\n        $bot->run();\n    }\n}\n")))}p.isMDXComponent=!0}}]);